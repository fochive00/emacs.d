#+STARTUP: indent

* Path
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (setq custom-file "~/.emacs.d/custom.el")
#+end_src
* Package management
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
    '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
     ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
     ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))
  ; (package-initialize)

  (setq package-enable-at-startup nil)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; Can be used to debug slow packages
  ;; (setq use-package-minimum-reported-time 0.05
  ;;       use-package-verbose t)

  (eval-when-compile
    (require 'use-package))

  (use-package diminish :ensure t)
#+end_src
* UI
** Based UI

#+begin_src emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))

(load-theme 'myTheme t)
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(column-number-mode t)
(show-paren-mode t)
(global-hl-line-mode 1)
(set-face-attribute 'default nil :height 120)

;; Disable the splash screen (to enable it agin, replace the t with 0)
(setq inhibit-splash-screen t)
;; Enable transient mark mode
(transient-mark-mode 1)

(setq initial-scratch-message "* Happy hacking!\n\n ")
(setq initial-major-mode 'org-mode)
#+end_src

** highlight-indent-guides

;#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-auto-enabled nil)
  (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  (set-face-background 'highlight-indent-guides-even-face "dimgray")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgray"))
;#+end_src

* Org-mode

--  [[https://orgmode.org/org.html][The Org Manual]] --

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :config
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook 'org-bullets-mode))
    (use-package htmlize
      :ensure t)
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (latex . t)))

    ;; 使用xelatex一步生成PDF，不是org-latex-to-pdf-process这个命令
    (setq org-latex-pdf-process
          '(
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "rm -fr %b.out %b.log %b.tex auto"
            ))
    ;; 设置默认后端为 `xelatex'
    (setq org-latex-compiler "xelatex")

    (setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "|" "CANCELED(c)")))
    (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-startup-folded t)
    
  )

#+end_src

* Tools
** Company-mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    ;:diminish company-mode
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-dabbrev-downcase nil
          company-minimum-prefix-length 2
          company-idle-delay 0.4)

    :config
    (use-package company-quickhelp 
      :ensure t
      :init
      (company-quickhelp-mode 1)
      :config 
      (setq company-quickhelp-delay nil)) 
    
    (global-set-key [C-tab] 'company-complete)
    (eval-after-load "company"
      '(progn
         (add-to-list 'company-backends 'company-files)
         (add-to-list 'company-backends 'company-clang)
      
         ;(add-to-list 'company-backends 'company-tern)
         
         (setq company-backends (delete 'company-dabbrev company-backends))
         (define-key company-active-map (kbd "C-p") 'company-select-previous)
         (define-key company-active-map (kbd "C-n") 'company-select-next)
         (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
         (define-key company-active-map (kbd "C-f") 'company-show-location))))
#+end_src

** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t)
#+end_src
** lsp

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp
  :config
  (use-package company-lsp 
    :ensure t
    :commands company-lsp
    :config
    (setq company-lsp-enable-snippet t))
  (add-to-list 'company-backends 'company-lsp)
  (setq lsp-prefer-flymake nil)
)
#+end_src
** multiple-cursors

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t)
#+end_src
** flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config
  )
#+end_src

** engine-mode

#+begin_src emacs-lisp
(use-package engine-mode
  :ensure t
  :bind-keymap ("C-x /" . engine-mode-map)
  :config
  (engine-mode t)
  
  (defengine yandex
    "https://yandex.com/search/?text=%s"
    :keybinding "y")
  
  (defengine github
    "https://github.com/search?q=%s"
    :keybinding "c")

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine stackoverflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")
  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s"
    :keybinding "r")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"))

#+end_src
  (defengine 
    "https://.com/search?q=%s"
    :keybinding "c")

** magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

** awesome-tab

--  [[https://github.com/manateelazycat/awesome-tab][awesome-tab github page]]  --

;#+begin_src emacs-lisp
(use-package awesome-tab
  :config
  (awesome-tab-mode t))
;#+end_src

** yasnippet

--  [[http://joaotavora.github.io/yasnippet/][YASnippet Documentation]]  --
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"))
)
#+end_src
* Programming
** CC-mode
#+begin_src emacs-lisp
  (setq-default c-basic-offset 8
                tab-width 8
                indent-tab-mode t)

  (setq c-default-style "linux") 
#+end_src
** c++-mode

#+begin_src emacs-lisp
(add-hook 'c++-mode-hook #'lsp)
#+end_src

** python-mode

#+begin_src emacs-lisp
(add-hook 'python-mode-hook #'lsp)
#+end_src
** geiser

--  [[https://gitlab.com/jaor/geiser][geiser gitlab page]]  --

#+begin_src emacs-lisp
(setq geiser-active-implementations '(chez))
#+end_src

* helm
--  [[https://github.com/emacs-helm/helm/wiki][Helm Wiki]]  --
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init
    (helm-mode 1)
    :config
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    (global-set-key (kbd "C-x C-f") #'helm-find-files))

#+end_src

* Global setup
** variables
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq indent-tabs-mode t)
  (setq tab-width 8)
#+end_src
** Global key bindings
#+begin_src emacs-lisp
  ;; avy-jump
  (global-set-key (kbd "C-c j") 'avy-goto-word-or-subword-1)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  ;; (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch)

  ;; org-mode
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  ;; (global-set-key (kbd "C-x C-b") 'ibuffer)
  ;; (autoload 'ibuffer "ibuffer" "List buffers." t)
#+end_src
** Custom Commands
#+begin_src emacs-lisp
  (defun configuration ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))
#+end_src
* Other Links
[[http://ergoemacs.org][ErgoEmacs]]

